// Brute Force   

  bool checkSubarraySum(vector<int>& nums, int k) {
        int sum=nums[0];
        for(int i=1;i<nums.size();i++){
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                if(sum%k==0){
                    return true;
                }
            }
            sum=nums[i];
        }
        return false;
    }

// Optimised Approch

bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        mp[0]=-1;
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            if(mp.find(sum%k)!=mp.end()){
                if(i-mp[sum%k]>=2) return true;
            }
        
        else{
            mp[sum%k]=i;
        }
        }
        return false;
    }
